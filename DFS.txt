
from collections import defaultdict

def generateAdjacencyList(edges):
    adjacencyList = defaultdict(list)
    for u, v in edges:
        adjacencyList[u].append(v)
        adjacencyList[v].append(u)
    return adjacencyList

edges = [['A', 'B'], ['A', 'C'], ["B", "D"], ["B", "E"],
         ["C", "F"], ["C", "G"], ["D", "H"], ["D", "I"],
         ["E", "J"], ["E", "K"], ["F", "L"], ["F", "M"]]

adjacencyList = generateAdjacencyList(edges)
print(adjacencyList)

def dfs(adjacencyList, vertex, visitedSet=None, path=None):
    if visitedSet is None:
        visitedSet = set()
    if path is None:
        path = []

    visitedSet.add(vertex)
    path.append(vertex)
    if vertex in adjacencyList:
        for neighbor in adjacencyList[vertex]:
            if neighbor not in visitedSet:
                dfs(adjacencyList, neighbor, visitedSet, path)
    return path

print(dfs(adjacencyList, 'A'))

